openapi: 3.0.0
info:
  contact:
    email: kenneth@starinformatics.com
  description: executes and creates multi-step, multi-input, scatterable workflows
    that chain together scripts from Translator Modules
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: NCATS Workflow Runner
  version: 0.0.1
servers:
- description: NCATS Workflow Runner
  url: http://0.0.0.0:8090
tags:
- description: Secured Admin-only calls to configure resolution service
  name: admins
- description: |
    Operations available for getting info on, and running workflows or workflow steps
  name: public
paths:
  /run/workflow/:
    post:
      description: The request here requires /full specification/, meaning that the
        user posts both a workflow to execute and all of the input that's needed.
      operationId: run_workflow_by_payload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullTaskPayload'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResults'
          description: The resopnse from the workflow runner (which if valid/200,
            are the location of the results or us returning the results)
      summary: runs a workflow and returns its results (TODO or delays them?) based
        off a (TODO given sequence of) workflow names and their (TODO scatterable)
        inputs
      tags:
      - public
      x-openapi-router-controller: cwl_server.controllers.public_controller
components:
  schemas:
    TaskId:
      properties:
        uuid:
          format: uuid
          type: string
      type: object
    FullTaskPayload:
      example:
        workflow_name: workflow_name
        input_mappings: input_mappings
      properties:
        workflow_name:
          description: A symbol corresponding to the workflow specification and module
            script
          type: string
        input_mappings:
          type: string
      required:
      - input_mappings
      - workflow_name
      type: object
    WorkflowResults:
      example:
        results_path: results_path
        task_id: task_id
      properties:
        task_id:
          type: string
        results_path:
          type: string
      required:
      - results_path
      - task_id
      type: object
