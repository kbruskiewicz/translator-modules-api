# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class WorkflowResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_id=None, results_path=None):  # noqa: E501
        """WorkflowResults - a model defined in OpenAPI

        :param task_id: The task_id of this WorkflowResults.  # noqa: E501
        :type task_id: str
        :param results_path: The results_path of this WorkflowResults.  # noqa: E501
        :type results_path: str
        """
        self.openapi_types = {
            'task_id': str,
            'results_path': str
        }

        self.attribute_map = {
            'task_id': 'task_id',
            'results_path': 'results_path'
        }

        self._task_id = task_id
        self._results_path = results_path

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WorkflowResults of this WorkflowResults.  # noqa: E501
        :rtype: WorkflowResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_id(self):
        """Gets the task_id of this WorkflowResults.


        :return: The task_id of this WorkflowResults.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this WorkflowResults.


        :param task_id: The task_id of this WorkflowResults.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    @property
    def results_path(self):
        """Gets the results_path of this WorkflowResults.


        :return: The results_path of this WorkflowResults.
        :rtype: str
        """
        return self._results_path

    @results_path.setter
    def results_path(self, results_path):
        """Sets the results_path of this WorkflowResults.


        :param results_path: The results_path of this WorkflowResults.
        :type results_path: str
        """
        if results_path is None:
            raise ValueError("Invalid value for `results_path`, must not be `None`")  # noqa: E501

        self._results_path = results_path
